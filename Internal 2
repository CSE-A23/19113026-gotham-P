PART-A 
   1)1. sizeof (object size information)
    2.typeid (object type information)
    3.static_cast 
    4.dot operator(.)

2)
c. Compiler Error in line ” Derived *dp = new Base;”

3)
Derevation of a class from other derived classes, which in turn are derived from the same base class.
Here the class result will have duplicate sets of members inherited from the class ‘student’,which intriduces ambiguity and should be avoided.
This ambiguity due to multiple paths is avoided .
This can be avoided by making common base class.
Here only one copy of that class is inherited

4)
A pure virtual function is a function that must be overridden in a derived class and need not be defined.
    A virtual function is declared to be “pure” using the curious =0 syntax.
class Test
{
public:
virtual void show()=0;
};

5)
b.catch(Test t)

    PART-B
 6)
 Overloading binary arthematic operator
     #include<iostream.h>
     #include<conio.h>

    class complex {
    int a, b;
public:

    void getvalue() {
        cout << "Enter the value of Complex Numbers a,b:";
        cin >> a>>b;
    }

    complex operator+(complex ob) {
        complex t;
        t.a = a + ob.a;
        t.b = b + ob.b;
        return (t);
    }

    complex operator-(complex ob) {
        complex t;
        t.a = a - ob.a;
        t.b = b - ob.b;
        return (t);
    }

    void display() {
        cout << a << "+" << b << "i" << "\n";
    }
};

    void main() {
    clrscr();
    complex obj1, obj2, result, result1;

    obj1.getvalue();
    obj2.getvalue();

    result = obj1 + obj2;
    result1 = obj1 - obj2;

    cout << "Input Values:\n";
    obj1.display();
    obj2.display();

    cout << "Result:";
    result.display();
    result1.display();

    getch();
}

 
 7)
When there are multiple functions with same name but different parameters then these functions are said to be overloaded. Functions can be overloaded by change in number of arguments or/and change in type of arguments.
Rules of Function Overloading
#include <bits/stdc++.h> 
using namespace std; 
class opps 
{ 
    public: 
      
    
    void func(int x) 
    { 
        cout << "value of x is " << x << endl; 
    } 
    void func(double x) 
    { 
        cout << "value of x is " << x << endl; 
    } 
    void func(int x, int y) 
    { 
        cout << "value of x and y is " << x << ", " << y << endl; 
    } 
}; 
  
int main() { 
      
  opps obj1;
    obj1.func(7); 
    obj1.func(9.132); 
    obj1.func(85,64); 
    return 0; 
}  

 8)
Base class constructors are always called in the derived class constructors. Whenever you create derived class object, 
   first the base class default constructor is executed and then the derived class's constructor finishes execution.
   1. Whether derived class's default constructor is called or parameterised is called, base class's default constructor is always
      called inside them.
   2. To call base class's parameterised constructor inside derived class's parameterised constructor, we must mention it explicitly
      while declaring derived class's parameterized constructor.

Program:
  class Base
  {
    int x;
    public:
    Base(int i)
     {
        x = i;
        cout << "Base Parameterized Constructor\n";
      }
  };
  class Derived : public Base 
  {
    int y;
    public:
    Derived(int j):Base(j)
    {
       y = j;
       cout << "Derived Parameterized Constructor\n";
    }
  };
  int main()
  {
    Derived d(10);
  }
9)
 Runtime overloading:This type of polymorphism is achieved by Function Overriding.
Function overriding on the other hand occurs when a derived class has a definition for one of the member functions of the base class. That base function is said to be overridden.
program: 
#include <bits/stdc++.h> 
using namespace std; 
  
class base 
{ 
public: 
    virtual void print () 
    { cout<< "print base class" <<endl; } 
   
    void show () 
    { cout<< "show base class" <<endl; } 
}; 
   
class derived:public base 
{ 
public: 
    void print () 
   
    void show () 
    { cout<< "show derived class" <<endl; } 
}; 
  
int main()  
{ 
    base *bptr; 
    derived d; 
    bptr = &d; 
    bptr->print();  
    bptr->show();  
    return 0; 
}  

10)
#include<iostream.h>
Void main()
{
Int num,den,result;
Cout<<”Enter the numerator:\n”;
Cin>>num;
Cout<<”Enter the denominator:\n”;
Cin>>den;
Try:
If(den==0)
{
Throw den;
}
Result=num/den;
Cout<<”Result :”<<result;
}
Catch(int n);
{
Cout<<”Denominator cannot be”<<n;}
}
}

PART-C

11)  #include <iostream>
      using namespace std;
      class base 
{
 	public:
 	int x;
 	void getdata()
 	{
    	cout << "Enter value of x= "; cin >> x;
 	}
};
        class derive1 : public base 
{
 	public:
 	int y;
 	void readdata()
 	{
 	    cout << "\nEnter value of y= "; cin >> y;
 	}
};
        class derive2 : public derive1  
{
 	private:
 	int z;
 	public:
 	void indata()
 	{
    	cout << "\nEnter value of z= "; cin >> z;
 	}
 	void product()
 	{
 	    cout << "\nProduct= " << x * y * z;
 	}
};
       int main()
{
     derive2 a;      
     a.getdata();
     a.readdata();
     a.indata();
     a.product();
     return 0;
}   
